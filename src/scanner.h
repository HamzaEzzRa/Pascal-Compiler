#ifndef SCANNER_H
#define SCANNER_H

#define KEYWORD_COUNT 59
#define SPECIAL_COUNT 17
#define BUFFER_SIZE 32
#define MAX_SPECIAL_SIZE 2 // Max length of special characters

typedef enum {
    AND_TOKEN = 1, ARRAY_TOKEN, ASM_TOKEN, BEGIN_TOKEN, BOOL_TOKEN, BREAK_TOKEN, CASE_TOKEN, CHAR_TOKEN, CONST_TOKEN, CONSTRUCTOR_TOKEN,
    CONTINUE_TOKEN, DESTRUCTOR_TOKEN, IDIV_TOKEN, DO_TOKEN, DOWNTO_TOKEN, ELSE_TOKEN, END_TOKEN, FILE_TOKEN, FOR_TOKEN, FUNCTION_TOKEN,
    GOTO_TOKEN, IF_TOKEN, IMPLEMENTATION_TOKEN, IN_TOKEN, INLINE_TOKEN, INT_TOKEN, INTERFACE_TOKEN, LABEL_TOKEN, MOD_TOKEN, NIL_TOKEN, 
    NOT_TOKEN, OBJECT_TOKEN, OF_TOKEN, ON_TOKEN, OPERATOR_TOKEN, OR_TOKEN, PACKED_TOKEN, PROCEDURE_TOKEN, PROGRAM_TOKEN, READ_TOKEN, 
    REAL_TOKEN, RECORD_TOKEN, REPEAT_TOKEN, SET_TOKEN, SHL_TOKEN, SHR_TOKEN, STRING_TOKEN, THEN_TOKEN, TO_TOKEN, TYPE_TOKEN, UNIT_TOKEN,
    UNTIL_TOKEN, USES_TOKEN, VAR_TOKEN, WHILE_TOKEN, WITH_TOKEN, WRITE_TOKEN, WRITELN_TOKEN, XOR_TOKEN, SC_TOKEN, COLON_TOKEN, PERIOD_TOKEN,
    PLUS_TOKEN, MINUS_TOKEN, MULT_TOKEN, RDIV_TOKEN, COMMA_TOKEN, ASSIGN_TOKEN, EQ_TOKEN, LESS_TOKEN, LEQ_TOKEN, BIGGER_TOKEN, BEQ_TOKEN,
    DIFF_TOKEN, OP_TOKEN, CP_TOKEN, EOF_TOKEN, ID_TOKEN, INUM_TOKEN, RNUM_TOKEN, SVAL_TOKEN, CVAL_TOKEN, RVALUE_TOKEN, VTYPE_TOKEN, ERROR_TOKEN
} TokenType;

extern const char* const keywords[];

extern const char* const specials[];

extern int line_count, char_count;

typedef struct {
    char *token;
    TokenType type;
    int start_ln;
    int start_col;
} TokenData;

TokenData *current_token;

int open_target_file(const char *);
void close_target_file();
void next_token();
void scan_file(const char *);

#endif
